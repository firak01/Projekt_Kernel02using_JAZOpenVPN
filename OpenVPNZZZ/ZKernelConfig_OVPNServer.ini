[OVPN!01]
#Produktivsystem
KernelLogPath=c:\fglKernel\KernelLog
KernelLogFile=ZKernelLog_ServerOVPN.txt

######## Modulkonfiguration ##############
;OpenVPN, weist auf das gleiche File
KernelConfigPathOVPN=<z:Null/>
KernelConfigFileOVPN=ZKernelConfig_OVPNServer.ini


;Beim ausführen der start-methode soll nach dem Hinzufügen des TrayIcons, sofort schon mit dem Starten der OVPN.exe-Processe begonnen werden.
ListenOnStart=1


####### Programmkonfigurationen ##########
#Finden der OVPN Konfigurationsfiles
ProgConfigHandler=OVPN!01_Config

#Setzen von Werten in die OVPNKonfigurationsfiles
ProgConfigValues=OVPN!01_ConfigValues

#Setzen von Werten, die für die Client/Server-Verbindung in einer extra Datei notwendig sind. (Stichwort: client-config-dir)
ProgConfigServerClientConfig=OVPN!01_ConfigServerClientConfig

#Ggfs anstellen eines Proxys
ProgProxyHandler=OVPN!01_Proxy

#Prüfen der OVPN Verbindung
ProgVPNCheck=OVPN!01_Check

#Prüfen, ob gewisse Processe schon laufen
ProgProcessCheck=OVPN!01_Process


[OVPN!01_Config] ; Für das Program ProgConfigHandler.      Neu 20191218: Aus einem Fehler heraus geboren. Nun Kommentare und Leerzeichen hinter den Sections möglich.
;Merke: Das wird wohl aus den Registrierungsinformationenen ausgelesen, anhand der Endung .ovpn für die Konfiguarationsdateien des OVPN-Programs.
;z.B. C:\Programme\OpenVPN\config\Template client_TCP_443.ovpn
;Merke: Leerstring bewirkt hier, dass nach der Application OVPN (anhand der registrierten Endung) gesucht wird. Dieser String wird dann genommen.
LocalMachineDirectoryRoot=
;Merke: Das ist das Verzeichnis im OVPN-Program Hautpverzeichnis
LocalMachineDirectoryChildConfig=config

;Merke: Das Template für die Erstellung liegt ggfs. in einem ganz anderen Verzeichnis oder gar im Jave-Projekt oder sogar in einer .jar Struktur.
DirectoryTemplate=template


;Alle Konfigurationsdatein, die Verwendet werden sollen. Falls dies leer ist, werden alle Konfigurationsdateien verwendet, die gefunden werden.
;Mehrere Dateien werden mit dem Path-Separator voneinander getrennt.
;Zum Entwickeln auf dem Client einige Client-Konfigurationsfile verwenden.
;ConfigFile=server_TCP_443.ovpn\server_UDP_2403.ovpn
ConfigFile=server_TCP_4999.ovpn

[OVPN!01_ConfigValues];Werte werden als ifconfig in das Template eingetragen. Erst der remote Wert, dann der lokale Wert. Die Werte müssen mit der IPAdresse der OVPN-TAP Verbindung auf der jeweiligen Maschine (z.B. OpenVPN1, remote/lokal) übereinstimmen
VpnIpRemote=10.0.0.2
VpnIpLocal=10.0.0.1
TapAdapterUsedLocal=OpenVPN1

[OVPN!01_ConfigServerClientConfig];Werte werden in die mit Client-config-dir als Verzeichnis angegebenen Dateien (CN-Namen der jeweiligen Client) eingetragen, bzw. dafür verwendet.
#Default Datei ist PAUL_HINDENBURG_CLIENT
DirectoryTemplate=<Z>[OVPN!01_Config]DirectoryTemplate</Z>

DirectoryServerClientConfig=clientconnection
#Mehrere Werte durch PIPE-Separator getrennt. Die Hostnamen. Für jeden der hier definierten Namen eine Datei mit dem CN-Namen des Hosts (also plus _CLIENT) im TemplateVerzeichnis per Program erstellen.
ServerClientConfigHostname=HANNIBALDEV05VM_CLIENT

[OVPN!01_Proxy];wird über readProxyEnabled() abgefragt.Nur wenn hier etwas drin steht, dann ist der Proxy enabled
;Ggf. zu verwendender Proxy
;ProxyHost=proxy.mettenmeier.de
ProxyHost=
ProxyPort=8080


[OVPN!01_Check]
;Der Port, welcher als DEFAULT für den Check der VPN-Verbindung verwendet wird.
;Er muss beim Client und beim Server-Starter identisch sein
VPNPort2Check=5000

;Zeit in Sekunden, die gewartet werden soll, auf das Starten des Netzwerkadapters (unter windows)
TapDeviceStartupTimeout=240

[OVPN!01_Process]
;Process2Check=nserver.exe
Process2Check=<Z>[OVPN!02_Process]Process2Check</Z>
CheckTimeout=120


#############################################################
### F?r lokales Intranet
#############################################################

[OVPN!02]
KernelLogPath=c:\fglKernel\KernelLog
KernelLogFile=ZKernelLog_ServerOVPN.txt


######## Modulkonfiguration ##############
;OpenVPN, weist auf das gleiche File
KernelConfigPathOVPN=<z:Null/>
KernelConfigFileOVPN=ZKernelConfig_OVPNServer.ini

;Beim Ausführen der start-methode soll nach dem Hinzufügen des TrayIcons, sofort schon mit dem Starten der OVPN.exe-Processe begonnen werden.
ListenOnStart=1


####### Programmkonfigurationen ##########
#Finden der OVPN Konfigurationsfiles
ProgConfigHandler=OVPN!01_Config

#Setzen von Werten in die OVPNKonfigurationsfiles
ProgConfigValues=OVPN!01_ConfigValues

#Setzen von Werten, die für die Client/Server-Verbindung in einer extra Datei notwendig sind. (Stichwort: client-config-dir)
ProgConfigServerClientConfig=OVPN!02_ConifgServerClientConfig

#Ggfs anstellen eines Proxys
ProgProxyHandler=OVPN!01_Proxy

#Prüfen der OVPN Verbindung
ProgVPNCheck=OVPN!01_Check

#Prüfen, ob gewisse Processe schon laufen
ProgProcessCheck=OVPN!02_Process

[OVPN!02_ConifgServerClientConfig];Werte werden in die mit Client-config-dir als Verzeichnis angegebenen Dateien (CN-Namen der jeweiligen Client) eingetragen, bzw. daür verwendet. 
#Default Datei ist PAUL_HINDENBURG_CLIENT
DirectoryTemplate=<Z>[OVPN!01_Config]DirectoryTemplate</Z>

DirectoryServerClientConfig=<Z>[OVPN!01_ConfigServerClientConfig]DirectoryServerClientConfig</Z>
#Mehrere Werte durch PIPE-Separator getrennt. Die Hostnamen. Für jeden der hier definierten Namen eine Datei mit dem CN-Namen des Hosts (also plus _CLIENT) im TemplateVerzeichnis per Program erstellen.
ServerClientConfigHostname=HANNIBALDEV04VM_CLIENT
		
[OVPN!02_Process]
;Normalerweise auf dem Dominoserver laufend ... Process2Check=nserver.exe
Process2Check=notepad.exe
CheckTimeout=999
